{"version":3,"sources":["components/card-list/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["MyCard","props","Col","Card","style","width","className","Img","variant","src","user","id","Body","Title","name","Subtitle","phone","Link","href","email","website","CardList","Row","users","map","index","key","SearchBox","placeholder","handleChange","md","InputGroup","FormControl","onChange","App","e","setState","searchValue","target","value","state","family_name","members","fetch","then","response","json","this","filteredUsers","filter","toLowerCase","includes","Container","fluid","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sUAIaA,EAAS,SAACC,GACnB,OACI,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAWC,UAAU,OAC3C,kBAACH,EAAA,EAAKI,IAAN,CAAUC,QAAQ,MAAMC,IAAG,+BAA0BR,EAAMS,KAAKC,GAArC,4BAC3B,kBAACR,EAAA,EAAKS,KAAN,KACA,kBAACT,EAAA,EAAKU,MAAN,KAAaZ,EAAMS,KAAKI,MACxB,kBAACX,EAAA,EAAKY,SAAN,CAAeT,UAAU,mBAAmBL,EAAMS,KAAKM,OACvD,kBAACb,EAAA,EAAKc,KAAN,CAAWC,KAAK,KAAKjB,EAAMS,KAAKS,OAChC,kBAAChB,EAAA,EAAKc,KAAN,CAAWC,KAAK,KAAKjB,EAAMS,KAAKU,a,eCR3BC,EAAW,SAACpB,GACrB,OACI,kBAACqB,EAAA,EAAD,KACI,yBAAKhB,UAAU,gBAEPL,EAAMsB,MAAMC,KAAI,SAACd,EAAMe,GAAP,OAAiB,kBAAC,EAAD,CAAQC,IAAKD,EAAOf,KAAMA,U,wBCJlEiB,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,yBAAKvB,UAAU,iCACf,kBAACgB,EAAA,EAAD,KACA,kBAACpB,EAAA,EAAD,CAAK4B,GAAG,QACR,kBAACC,EAAA,EAAD,KACM,kBAACC,EAAA,EAAD,CAAaJ,YAAaA,EAAaK,SAAUJ,SCsC1CK,E,kDA1Cf,aAAe,IAAD,8BACZ,gBAiBFL,aAAe,SAAAM,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAQ,CACXC,YAAa,aACbC,QAAS,CACP,mBACA,iBACA,kBACA,cACA,eAEFnB,MAAO,GACPc,YAAa,IAbH,E,gEAuBO,IAAD,OAClBM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAArB,GAAK,OAAI,EAAKa,SAAS,CAACb,MAAOA,S,+BAG7B,IAAD,EACsBwB,KAAKP,MAA3BjB,EADA,EACAA,MAAOc,EADP,EACOA,YACRW,EAAgBzB,EAAM0B,QAAO,SAAAvC,GAAI,OAAIA,EAAKI,KAAKoC,cAAcC,SAASd,EAAYa,kBACxF,OACE,kBAACE,EAAA,EAAD,CAAWC,OAAK,EAAC/C,UAAU,OAC3B,wBAAIA,UAAU,iCAAd,uBACA,kBAAC,EAAD,CAAWsB,YAAY,iBAAiBC,aAAckB,KAAKlB,eAC3D,kBAAC,EAAD,CAAUN,MAAOyB,S,GArCLM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dbdd3243.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\n\nexport const MyCard = (props) => { \n    return (\n        <Col>\n        <Card style={{ width: '18rem' }} className=\"m-3\">\n        <Card.Img variant=\"top\" src={`https://robohash.org/${props.user.id}?set=set4&size=180x180`} />\n        <Card.Body>\n        <Card.Title>{props.user.name}</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">{props.user.phone}</Card.Subtitle>\n        <Card.Link href=\"#\">{props.user.email}</Card.Link>\n        <Card.Link href=\"#\">{props.user.website}</Card.Link>\n        </Card.Body>\n        </Card>\n        </Col>\n        )\n    }\n    /* <div>\n        <h1>{props.user.name}</h1>\n        <p>{props.user.email}</p>\n    </div> */","import React from 'react';\nimport { MyCard } from './card/card.component';\nimport './card-list.component.css';\nimport Row from 'react-bootstrap/Row';\n\nexport const CardList = (props) => {\n    return (\n        <Row>\n            <div className=\"CardList m-3\">\n                {\n                    props.users.map((user, index) => <MyCard key={index} user={user} />)\n                }\n            </div>\n        </Row>\n    )\n}","import React from 'react';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <div className=\"d-flex justify-content-center\">\n    <Row>\n    <Col md=\"auto\">\n    <InputGroup>\n          <FormControl placeholder={placeholder} onChange={handleChange}/>\n        </InputGroup>\n        </Col>\n        </Row>\n    </div>\n)","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport Container from 'react-bootstrap/Container';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      family_name: \"Bhaskaruni\",\n      members: [\n        \"Lakshmi Narayana\",\n        \"Sheshamba Devi\",\n        \"Gopichand Kumar\",\n        \"Swapna Rama\",\n        \"Chiranjeevi\"\n      ],\n      users: [],\n      searchValue: ''\n    }\n\n  }\n\n  handleChange = e => {\n    this.setState({searchValue: e.target.value})\n  }\n  \n  \n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({users: users}))\n  }\n  \n  render() {\n    const {users, searchValue} = this.state;\n    const filteredUsers = users.filter(user => user.name.toLowerCase().includes(searchValue.toLowerCase()))\n    return (\n      <Container fluid className=\"p-3\">\n      <h1 className=\"d-flex justify-content-center\">Kitty Search Engine</h1>\n      <SearchBox placeholder=\"Kitties Search\" handleChange={this.handleChange}/>\n      <CardList users={filteredUsers} />\n      </Container>\n      )\n    }\n  }\n  \n  export default App;\n  \n  /* \n    this.handleChange = this.handleChange.bind(this);\n    handleChange(e) {\n    this.setState({searchValue: e.target.value})\n  } */\n\n  /* changeName() {\n    this.setState({name: 'CSK'});\n  } */\n\n  // function component\n  /* function App() {\n    return (\n      <div className=\"App\">\n          <p>Hello, CSK!!!</p>\n      </div>\n    );\n  } */\n\n\n  // <div className=\"App\">\n  //   <CardList users={this.state.users} />\n  // </div>\n  \n// MemberList and Member components\n/* \n  <p>Hello, {this.state.name}!!!</p>\n  <button onClick={() => this.changeName()}>Change Name</button>\n  <MemberList members={this.state.members}>\n    <p>I'm child - <i>{this.state.family_name}</i></p>\n  </MemberList>\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}